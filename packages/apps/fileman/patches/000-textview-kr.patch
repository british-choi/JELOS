diff --git a/src/def.h b/src/def.h
index b5cf84b..90c86a7 100644
--- a/src/def.h
+++ b/src/def.h
@@ -112,8 +112,8 @@
    #define SCREEN_HEIGHT            480
    #define HARDWARE_ACCELERATION    0
    #define FULLSCREEN               1
-   #define FONT_NAME                "NotoSans-Regular.ttf"
-   #define FONT_NAME_MONO           "NotoSansMono-Regular.ttf"
+   #define FONT_NAME                "NanumGothic.ttf"
+   #define FONT_NAME_MONO           "NanumGothicCoding-Bold.ttf"
    #define FONT_SIZE                20
    #define LINE_HEIGHT              32
    #define ICON_SIZE                24
diff --git a/src/fileUtils.cpp b/src/fileUtils.cpp
index b92a756..3a1d25e 100644
--- a/src/fileUtils.cpp
+++ b/src/fileUtils.cpp
@@ -380,5 +380,5 @@ bool FileUtils::fileIsText(const std::string &p_path)
    while (fgets(buffer, sizeof(buffer), pipe) != NULL);
    pclose(pipe);
    line = buffer;
-   return (line.substr(0, 4) == "text" && line.find("charset=us-ascii") != std::string::npos);
+   return (line.substr(0, 4) == "text" && (line.find("charset=us-ascii") != std::string::npos || line.find("utf-8") != std::string::npos));
 }
diff --git a/src/sdlutils.cpp b/src/sdlutils.cpp
index ba56240..cb38c76 100644
--- a/src/sdlutils.cpp
+++ b/src/sdlutils.cpp
@@ -192,6 +192,33 @@ void SDLUtils::renderTexture(SDL_Texture * p_texture, const int p_x, const int p
 //------------------------------------------------------------------------------
 
 // Render text on the screen
+int SDLUtils::renderTextClip(const std::string &p_text, TTF_Font *p_font, const int p_x, const int p_y, const int p_startCol, const SDL_Color &p_fg, const SDL_Color &p_bg, const T_ALIGN_H p_alignH, const T_ALIGN_V p_alignV, const int p_maxWidth, const T_ALIGN_H p_alignHClip)
+{
+   SDL_Texture *texture = renderText(p_text, p_font, p_fg, p_bg);
+   if (texture == NULL)
+   {
+      std::cerr << "Unable to create texture from surface. SDL_Error: " << SDL_GetError() << std::endl;
+      return 0;
+   }
+   int x = p_startCol * g_charW, w = 0, h = 0;
+   SDL_QueryTexture(texture, NULL, NULL, &w, &h);
+
+   // Check size
+   SDL_Rect rect = { x, 0 , w - x, h};
+   if (p_maxWidth != -1 && w - rect.x > p_maxWidth)
+   {
+      // Clip texture width
+      if (p_alignHClip == T_ALIGN_RIGHT)
+         rect.x = w - rect.w;
+      else
+         rect.w = p_maxWidth;
+   }
+   renderTexture(texture, p_x, p_y, p_alignH, p_alignV, SDL_FLIP_NONE, &rect);
+   // Free texture
+   SDL_DestroyTexture(texture);
+   return w;
+}
+
 int SDLUtils::renderText(const std::string &p_text, TTF_Font *p_font, const int p_x, const int p_y, const SDL_Color &p_fg, const SDL_Color &p_bg, const T_ALIGN_H p_alignH, const T_ALIGN_V p_alignV, const int p_maxWidth, const T_ALIGN_H p_alignHClip)
 {
    SDL_Texture *texture = renderText(p_text, p_font, p_fg, p_bg);
diff --git a/src/sdlutils.h b/src/sdlutils.h
index fee0a9a..03f51f6 100644
--- a/src/sdlutils.h
+++ b/src/sdlutils.h
@@ -40,6 +40,7 @@ namespace SDLUtils
 
    // Render text on the screen
    // Return: width of the texture
+   int renderTextClip(const std::string &p_text, TTF_Font *p_font, const int p_x, const int p_y, const int p_startCol, const SDL_Color &p_fg, const SDL_Color &p_bg, const T_ALIGN_H p_alignH = T_ALIGN_LEFT, const T_ALIGN_V p_alignV = T_ALIGN_TOP, const int p_maxWidth = -1, const T_ALIGN_H p_alignHClip = T_ALIGN_LEFT);
    int renderText(const std::string &p_text, TTF_Font *p_font, const int p_x, const int p_y, const SDL_Color &p_fg, const SDL_Color &p_bg, const T_ALIGN_H p_alignH = T_ALIGN_LEFT, const T_ALIGN_V p_alignV = T_ALIGN_TOP, const int p_maxWidth = -1, const T_ALIGN_H p_alignHClip = T_ALIGN_LEFT);
 
    // Render text on the screen, with clip scrolling
diff --git a/src/textEditor.cpp b/src/textEditor.cpp
index fa934ec..6af5c33 100644
--- a/src/textEditor.cpp
+++ b/src/textEditor.cpp
@@ -89,7 +89,8 @@ void TextEditor::render(const bool p_focus)
       // Case: no text selection
       if (m_textSelectionStart.y == -1 || m_textSelectionEnd.y == -1)
       {
-         SDLUtils::renderText(m_lines[l_i].substr(m_camera.x, m_nbVisibleChars), g_fontMono, MARGIN_X, l_y, l_fgColor, l_bgColor, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE);
+         SDLUtils::renderTextClip(m_lines[l_i], g_fontMono, MARGIN_X, l_y, m_camera.x, l_fgColor, l_bgColor, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE, m_nbVisibleChars * g_charW);
+         //SDLUtils::renderText(m_lines[l_i].substr(m_camera.x, m_nbVisibleChars), g_fontMono, MARGIN_X, l_y, l_fgColor, l_bgColor, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE);
          continue;
       }
       // Case: text selection
diff --git a/src/textInput.cpp b/src/textInput.cpp
index 8d6c943..fe17fe4 100644
--- a/src/textInput.cpp
+++ b/src/textInput.cpp
@@ -56,7 +56,8 @@ void TextInput::render(const bool p_focus)
 
    // Input text
    if (! m_inputText.empty())
-      SDLUtils::renderText(m_inputText.substr(m_camera.x, m_nbVisibleChars), g_fontMono, m_dialogBody.x + MARGIN_X, m_dialogBody.y + LINE_HEIGHT/2, {COLOR_TEXT_NORMAL}, {COLOR_BODY_BG}, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE);
+      SDLUtils::renderTextClip(m_inputText, g_fontMono, m_dialogBody.x + MARGIN_X, m_dialogBody.y + LINE_HEIGHT/2, m_camera.x, {COLOR_TEXT_NORMAL}, {COLOR_BODY_BG}, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE, m_nbVisibleChars * g_charW);
+      //SDLUtils::renderText(m_inputText.substr(m_camera.x, m_nbVisibleChars), g_fontMono, m_dialogBody.x + MARGIN_X, m_dialogBody.y + LINE_HEIGHT/2, {COLOR_TEXT_NORMAL}, {COLOR_BODY_BG}, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE);
 
    // Cursor
    SDL_SetRenderDrawColor(g_renderer, COLOR_TEXT_NORMAL, 255);
diff --git a/src/textViewer.cpp b/src/textViewer.cpp
index 572b341..7c399c5 100644
--- a/src/textViewer.cpp
+++ b/src/textViewer.cpp
@@ -106,7 +106,8 @@ void TextViewer::render(const bool p_focus)
    SDL_Color l_bgColor = {COLOR_BODY_BG};
    for (int l_i = m_camera.y; l_i < m_camera.y + m_nbVisibleLines && l_i < m_nbItems; ++l_i, l_y += LINE_HEIGHT)
       if (m_camera.x < static_cast<int>(m_lines[l_i].size()))
-         SDLUtils::renderText(m_lines[l_i].substr(m_camera.x, m_nbVisibleChars), g_fontMono, MARGIN_X, l_y, l_fgColor, l_bgColor, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE);
+         SDLUtils::renderTextClip(m_lines[l_i], g_fontMono, MARGIN_X, l_y, m_camera.x, l_fgColor, l_bgColor, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE, m_nbVisibleChars * g_charW);
+//         SDLUtils::renderText(m_lines[l_i].substr(m_camera.x, m_nbVisibleChars), g_fontMono, MARGIN_X, l_y, l_fgColor, l_bgColor, SDLUtils::T_ALIGN_LEFT, SDLUtils::T_ALIGN_MIDDLE);
 }
 
 //------------------------------------------------------------------------------
